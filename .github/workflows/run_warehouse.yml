name: Run Data Warehouse

on:
#   schedule:
#     - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to run the script'
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      chromedriver_path: ${{ steps.setup-chrome.outputs.chromedriver-path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.environment == 'prod' && 'master' || 'dev' }}

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Create virtual environment
        run: |
          python -m venv .venv-ingest
          source .venv-ingest/bin/activate
          pip install -r ingest/requirements.txt

      - name: Upload virtual environment
        uses: actions/upload-artifact@v3
        with:
          name: venv-ingest
          path: .venv-ingest

      - name: Remove old Chrome if it exists
        run: |
          sudo apt-get remove -y google-chrome-stable || true  # Ignore error if Chrome is not installed

      - name: Install chrome
        id: setup-chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: ${{ vars.CHROME_VERSION }}
          install-chromedriver: true

  create_ingestion_schemas:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.environment == 'prod' && 'master' || 'dev' }}
      
      - name: Download virtual environment
        uses: actions/download-artifact@v3
        with:
          name: venv-ingest

      - name: Set schema variables
        id: set-schema
        run: |
          # Start by setting the SCHEMA_INGESTION variable from the environment variable
          SCHEMA_INGESTION="${{ vars.SCHEMA_INGESTION }}"
          SCHEMA_INGESTION_TEMP="${SCHEMA_INGESTION}_temp"

          # Modify the schema names if the environment is 'dev'
          if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
            SCHEMA_INGESTION="${SCHEMA_INGESTION}_dev"
            SCHEMA_INGESTION_TEMP="${SCHEMA_INGESTION_TEMP}_dev"
          fi

          # Export the variables to be used in subsequent steps
          echo "SCHEMA_INGESTION=$SCHEMA_INGESTION" >> $GITHUB_ENV
          echo "SCHEMA_INGESTION_TEMP=$SCHEMA_INGESTION_TEMP" >> $GITHUB_ENV

      - name: Create schemas
        env:
          DATABASE: ${{ vars.SUPABASE_DATABASE }}
          HOST: ${{ vars.SUPABASE_HOST }}
          PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          PORT: ${{ vars.SUPABASE_PORT }}
          SCHEMA_INGESTION: ${{ env.SCHEMA_INGESTION }}
          SCHEMA_INGESTION_TEMP: ${{ env.SCHEMA_INGESTION_TEMP }}
          USER: ${{ vars.SUPABASE_USER }}
        run: |
          echo "Creating schemas"
          source ingest/venv-ingest/bin/activate
          python -m ingest.create_ingestion_schemas

  run_ingestion:
    needs: [create_ingestion_schemas, setup]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        script_name: ["ingest_players_tennisabstract"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.environment == 'prod' && 'master' || 'dev' }}
      
      - name: Download virtual environment
        uses: actions/download-artifact@v3
        with:
          name: venv-ingest

      - name: Run ingestion script
        env:
          CHROMEDRIVER_PATH: ${{ needs.setup.outputs.chromedriver-path }}
          DATABASE: ${{ vars.SUPABASE_DATABASE }}
          HOST: ${{ vars.SUPABASE_HOST }}
          PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
          PORT: ${{ vars.SUPABASE_PORT }}
          SCHEMA_INGESTION: ${{ env.SCHEMA_INGESTION }}
          SCHEMA_INGESTION_TEMP: ${{ env.SCHEMA_INGESTION_TEMP }}
          USER: ${{ vars.SUPABASE_USER }}
        run: |
          echo "Running ingestion script: ${{ matrix.script_name }}"
          source ingest/venv-ingest/bin/activate
          python -m ingest.${{ matrix.script_name }}
